"""add new table 21/11/2024

Revision ID: 42665c36b63d
Revises: 64075001c746
Create Date: 2024-11-21 17:39:13.708861

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "42665c36b63d"
down_revision: Union[str, None] = "64075001c746"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "point_organization",
        sa.Column("id_point_organization", sa.Integer(), nullable=False),
        sa.Column("id_point", sa.Integer(), nullable=False),
        sa.Column("id_organization", sa.Integer(), nullable=False),
        sa.Column(
            "created_on",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_on",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["id_organization"],
            ["organization.id_organization"],
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["id_point"], ["point.id_point"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id_point_organization"),
        sa.UniqueConstraint(
            "id_point", "id_organization", name="point_organization_uc"
        ),
    )
    op.create_table(
        "point_people",
        sa.Column("id_point_people", sa.Integer(), nullable=False),
        sa.Column("id_point", sa.Integer(), nullable=False),
        sa.Column("id_people", sa.Integer(), nullable=False),
        sa.Column(
            "created_on",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_on",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["id_people"], ["people.id_people"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["id_point"], ["point.id_point"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id_point_people"),
        sa.UniqueConstraint("id_point", "id_people", name="point_people_uc"),
    )
    op.add_column(
        "driver", sa.Column("id_point", sa.Integer(), server_default='1', nullable=False)
    )
    op.create_foreign_key(
        None, "driver", "point", ["id_point"], ["id_point"], ondelete="CASCADE"
    )
    op.drop_constraint("organization_uc", "organization", type_="unique")
    op.create_unique_constraint(None, "organization", ["name_organization"])
    op.drop_constraint(
        "organization_id_point_fkey", "organization", type_="foreignkey"
    )
    op.drop_column("organization", "id_point")
    op.add_column(
        "other_route", sa.Column("id_point", sa.Integer(), server_default='1', nullable=False)
    )
    op.create_foreign_key(
        None,
        "other_route",
        "point",
        ["id_point"],
        ["id_point"],
        ondelete="CASCADE",
    )
    op.add_column(
        "passenger", sa.Column("id_point", sa.Integer(), server_default='1', nullable=False)
    )
    op.create_foreign_key(
        None,
        "passenger",
        "point",
        ["id_point"],
        ["id_point"],
        ondelete="CASCADE",
    )
    op.drop_constraint("people_uc", "people", type_="unique")
    op.create_unique_constraint(
        "people_uc",
        "people",
        ["first_name", "last_name", "patronymic", "id_position"],
    )
    op.drop_constraint("people_id_point_fkey", "people", type_="foreignkey")
    op.drop_column("people", "id_point")
    op.alter_column(
        "refueling",
        "quantity",
        existing_type=sa.REAL(),
        type_=sa.Float(precision=2, asdecimal=2, decimal_return_scale=2),
        existing_nullable=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "refueling",
        "quantity",
        existing_type=sa.Float(
            precision=2, asdecimal=2, decimal_return_scale=2
        ),
        type_=sa.REAL(),
        existing_nullable=False,
    )
    op.add_column(
        "people",
        sa.Column(
            "id_point", sa.INTEGER(), autoincrement=False, nullable=False
        ),
    )
    op.create_foreign_key(
        "people_id_point_fkey",
        "people",
        "point",
        ["id_point"],
        ["id_point"],
        ondelete="CASCADE",
    )
    op.drop_constraint("people_uc", "people", type_="unique")
    op.create_unique_constraint(
        "people_uc",
        "people",
        ["first_name", "last_name", "patronymic", "id_point", "id_position"],
    )
    op.drop_constraint(None, "passenger", type_="foreignkey")
    op.drop_column("passenger", "id_point")
    op.drop_constraint(None, "other_route", type_="foreignkey")
    op.drop_column("other_route", "id_point")
    op.add_column(
        "organization",
        sa.Column(
            "id_point", sa.INTEGER(), autoincrement=False, nullable=False
        ),
    )
    op.create_foreign_key(
        "organization_id_point_fkey",
        "organization",
        "point",
        ["id_point"],
        ["id_point"],
        ondelete="CASCADE",
    )
    op.drop_constraint(None, "organization", type_="unique")
    op.create_unique_constraint(
        "organization_uc", "organization", ["name_organization", "id_point"]
    )
    op.drop_constraint(None, "driver", type_="foreignkey")
    op.drop_column("driver", "id_point")
    op.drop_table("point_people")
    op.drop_table("point_organization")
    # ### end Alembic commands ###
